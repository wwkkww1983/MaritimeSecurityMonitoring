using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using System.Windows.Controls.Primitives;

using MaritimeSecurityMonitoring.MainInterfacePage;

namespace MaritimeSecurityMonitoring
{
    /// <summary>
    /// RoleManagement.xaml 的交互逻辑
    /// </summary>
    public partial class RoleManagement : Page
    {
        private ObservableCollection<SystemRole> roleList = new ObservableCollection<SystemRole>();
        private int editID;

        public RoleManagement()
        {
            InitializeComponent();
            
            List<string[]> list = MonitoringX.data.sele_user_manage(MonitoringX.mycon);

            for (int i = 0; i < list.Count; i++)
            {
                SystemRole sr = new SystemRole
                {
                    ID = i,
                    Code = list[i][0],
                    Name =list[i][1],
                    Right = list[i][2],
                    Description = list[i][4],
                    ReadOnly = true,
                    IsConfirm = true,
                };
                roleList.Add(sr);
            }
            RoleListView.DataContext = roleList;
        }

        private void Edit_Click(object sender, RoutedEventArgs e)//列表编辑
        {
            Button b = sender as Button;
            int id = Convert.ToInt32(b.CommandParameter);
            for (int i = RoleListView.Items.Count - 1; i >= 0; i--)
            {
                if (roleList[i].ID == id)
                    if (roleList[i].ReadOnly == true)
                    {
                        roleList[i].ReadOnly = false;
                    }
                    else
                    {
                        MonitoringX.data.update_user(MonitoringX.mycon, roleList[i].Code, roleList[i].Name, roleList[i].Right, "", roleList[i].Description, "", "", "", "");//用户数据更新  
                        roleList[i].ReadOnly = true;
                    }                 
            }
        }

        private void Delete_Click(object sender, RoutedEventArgs e)//列表删除
        {
            Button b = sender as Button;
            int id = Convert.ToInt32(b.CommandParameter);
            for (int i = RoleListView.Items.Count - 1; i >= 0; i--)
            {
                if (roleList[i].ID == id)
                {
                    MonitoringX.data.remove_user(MonitoringX.mycon, roleList[i].Code);//数据库删除用户
                    roleList.RemoveAt(i);
                    
                }
            }
        }

        private void AddTargetClick(object sender, RoutedEventArgs e)//新增
        {
            SystemRole sr = new SystemRole
            {
                ID = roleList.Count,
                ReadOnly = false,
                IsConfirm = false,
            };
            editID = roleList.Count;//保存新增列表的id
            roleList.Add(sr);        
        }

        private void ConfirmClick(object sender, RoutedEventArgs e)//确定（更新新添加数据到数据库）
        {
            string[] user = {roleList[editID].Code, roleList[editID].Name, roleList[editID].Right, "", roleList[editID].Description, "", "", "", ""};
            MonitoringX.data.userRegister(MonitoringX.mycon,user);
            for (int i = RoleListView.Items.Count - 1; i >= 0; i--)
            {
                roleList[i].ReadOnly = true;
                roleList[i].IsConfirm = true;
            }
        }

        private void CancelClick(object sender, RoutedEventArgs e)//取消（删除新增的那一行）
        {
            for (int i = RoleListView.Items.Count - 1; i >= 0; i--)
            {
                if (roleList[i].IsConfirm == false)
                {
                    roleList.RemoveAt(i);
                    break;
                }
            }
        }
    }
}
